<?php
/**
 * @file Define the install process for Drupal Origins profile.
 */

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function drupal_origins_install() {
  // Get the proper localization function.
  $t = get_t();

  // Add filtered html text format
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );

  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  // Add Rich HTML text format
  $rich_html_format = array(
    'format' => 'rich_html',
    'name' => 'Rich HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
        'settings' => array(
          'allowed_html' => '<a> <em> <strong> <cite> <blockquote> <code> <ul> <ol> <li> <dl> <dt> <dd> <span> <p> <div> <h2> <h3> <h4> <img>',
          'filter_html_help' => 1,
          'filter_html_nofollow' => 0,
        ),
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );

  $rich_html_format = (object) $rich_html_format;
  filter_format_save($rich_html_format);

  // Insert default pre-defined node types into the database. For a complete
  // list of available node type attributes, refer to the node type API
  // documentation at: http://api.drupal.org/api/HEAD/function/hook_node_info.
  $types = array(
    array(
      'type' => 'page',
      'name' => $t('Basic page'),
      'base' => 'node_content',
      'description' => $t("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    ),
  );

  foreach ($types as $type) {
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
  }

  // Default "Basic page" to not be promoted and have comments disabled.
  variable_set('node_options_page', array('status'));
  variable_set('comment_page', COMMENT_NODE_HIDDEN);

  // Don't display date and author information for "Basic page" nodes by
  // default.
  variable_set('node_submitted_page', FALSE);

  // Enable user picture support and set the default to a square thumbnail
  // option.
  variable_set('user_pictures', '1');
  variable_set('user_picture_dimensions', '1024x1024');
  variable_set('user_picture_file_size', '800');
  variable_set('user_picture_style', 'thumbnail');

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array(
    'access content',
    'access comments',
    $filtered_html_permission,
  ));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array(
    'access content',
    'access comments',
    'post comments',
    'skip comment approval',
    $filtered_html_permission,
  ));

  // Create a default role for site administrators, with all available
  // permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

  // Create a Home link in the main menu.
  $item = array(
    'link_title' => $t('Home'),
    'link_path' => '<front>',
    'menu_name' => 'main-menu',
  );
  menu_link_save($item);

  // Update the menu router information.
  menu_rebuild();

  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');

  // Define forms with captcha enabled
  module_load_include('inc', 'captcha');
  $captcha_point_form_ids = array(
    'user_register_form' => 'captcha/Math',
  );

  foreach ($captcha_point_form_ids as $captcha_point_form_id => $captcha_type) {
    captcha_set_form_id_setting($captcha_point_form_id, $captcha_type);
  }

  // Define default settings for pathauto module
  variable_set('pathauto_transliterate', 1);

  // Elysia cron jobs
  $elysia_jobs = array(
    'captcha_cron' => array(
      'job_rule' => '4 0 * * *',
      'job_weight' => NULL,
      'job_disabled' => 0,
      'job_channel' => NULL,
    ),
    'ctools_cron' => array(
      'job_rule' => '4 0 * * *',
      'job_weight' => NULL,
      'job_disabled' => 0,
      'job_channel' => NULL,
    ),
    'dblog_cron' => array(
      'job_rule' => '4 0 * * 0',
      'job_weight' => NULL,
      'job_disabled' => 0,
      'job_channel' => NULL,
    ),
    'field_cron' => array(
      'job_rule' => '4 0 * * 0',
      'job_weight' => NULL,
      'job_disabled' => 0,
      'job_channel' => NULL,
    ),
    'node_cron' => array(
      'job_rule' => '4 0 * * 0',
      'job_weight' => NULL,
      'job_disabled' => 0,
      'job_channel' => NULL,
    ),
    'system_cron' => array(
      'job_rule' => '4 0 * * 0',
      'job_weight' => NULL,
      'job_disabled' => 0,
      'job_channel' => NULL,
    ),
    'update_cron' => array(
      'job_rule' => '4 0 * * 0',
      'job_weight' => NULL,
      'job_disabled' => 0,
      'job_channel' => NULL,
    ),
    'views_bulk_operations_cron' => array(
      'job_rule' => '4 0 * * 0',
      'job_weight' => NULL,
      'job_disabled' => 0,
      'job_channel' => NULL,
    ),
  );

  foreach ($elysia_jobs as $cron_key => $job) {
    // Set Job rule
    elysia_cron_set($cron_key, FALSE, array('rule' => $job['job_rule']));
    // Set Job weight
    elysia_cron_set($cron_key, FALSE, array('weight' => $job['job_weight']));
    // Set Job disabled
    elysia_cron_set($cron_key, FALSE, array('disable' => $job['job_disabled']));
    // Set Job channel
    elysia_cron_set($cron_key, FALSE, array('context' => $job['job_channel']));
  }

  // jQuery Update Settings
  variable_set('jquery_update_jquery_cdn', 'google');
  variable_set('jquery_update_jquery_admin_version', '1.5');
  variable_set('jquery_update_jquery_version', '1.10');

  // EU Cookie Compliance settings
  _drupal_origins_configure_eu_cookie_compliance();

  // Enable themes
  theme_enable(array('seven', 'da_vinci'));
  variable_set('theme_default', 'da_vinci');
  variable_set('admin_theme', 'seven');
}

/**
 * Implements hook_install_tasks().
 */
function drupal_origins_install_tasks() {
  $tasks = array();
  $drupal_origins_extensions = variable_get('drupal_origins_extensions', array());

  // Selection of Drupal Origins extensions
  $tasks['drupal_origins_extensions_form'] = array(
    'display_name' => st('Drupal Origins extensions'),
    'type' => 'form',
  );
  // Install extensions task
  $tasks['drupal_origins_install_extensions'] = array(
    'display_name' => st('Install Drupal Origins extensions'),
    'type' => 'batch',
    'display' => !empty($drupal_origins_extensions),
    'dfp_settings' => array(
      'dfp_unit' => 'Drupal_Origins_Install',
    ),
  );

  return $tasks;
}

/**
 * Return the Drupal Origins extension step form.
 *
 * @param array $form
 *   Form definition array.
 * @param array $form_state
 *    Form state array.
 */
function drupal_origins_extensions_form(array $form, array &$form_state) {
  $form = array();
  $readme_link = l(t('README.txt'), drupal_get_path('module', 'drupal_origins') . '/README.txt', array('absolute' => TRUE));
  $form['main_message'] = array(
    '#markup' => st('Congratulations! Your Drupal Origins basic installation has finished. Now you might want to enable some of the following Drupal Origins extensions in your site. Each of them have been developed for different purposes, they enable some extra modules and add a default settings for each of them. For more info, please read the !readme_link file', array('!readme_link' => $readme_link)),
  );

  $extensions = _drupal_origins_get_extensions_definition();

  foreach ($extensions as $extension) {
    $extension_container = $extension->name . '_container';
    $form[$extension_container] = array(
      '#type' => 'fieldset',
      '#attributes' => array('class' => array('extension')),
      '#title' => check_plain($extension->info['name']),
    );

    $form[$extension_container][$extension->name] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable @extension', array('@extension' => $extension->info['name'])),
    );

    $form[$extension_container][$extension->name . '_description'] = array(
      '#markup' => '<span>' . $extension->info['description'] . '</span>',
    );

    $form[$extension_container][$extension->name . '_modules_container']
      = _drupal_origins_get_renderable_module_dependencies($extension);

    $readme_link = l(t('README.txt'), drupal_get_path('module', $extension->name) . '/README.txt', array('absolute' => TRUE));
    $form[$extension_container][$extension->name . '_full_description'] = array(
      '#markup' => '<div>' . t('Full info about @extension is available at !url',
          array('@extension' => $extension->info['name'], '!url' => $readme_link)) . '</div>',
    );
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Continue'),
  );

  return $form;
}

/**
 * Implements FORM_submit().
 */
function drupal_origins_extensions_form_submit($form, &$form_state) {
  $extensions_to_install = array();
  foreach ($form_state['values'] as $key => $value) {
    if (_drupal_origins_is_valid_extension($key) && !empty($value)) {
      $extensions_to_install[] = $key;
    }
  }

  variable_set('drupal_origins_extensions', $extensions_to_install);
}

/**
 * Define the batch process to enable the extensions required.
 *
 * @return array
 *   $batch
 */
function drupal_origins_install_extensions() {
  $modules = variable_get('drupal_origins_extensions', array());
  $operations = array();
  if (!empty($modules)) {
    foreach ($modules as $module) {
      $operations[] = array('_drupal_origins_enable_module', array($module));
    }

    // Clear caches
    $operations[] = array('_drupal_origins_clear_caches');
  }

  $batch = array(
    'title' => st('Installing additional Drupal Origins extensions'),
    'operations' => $operations,
  );

  return $batch;
}

/**
 * Retrieve the Drupal Origins extensions module definition.
 *
 * @return array
 *   $modules_filtered
 */
function _drupal_origins_get_extensions_definition() {
  $module_definitions = system_rebuild_module_data();
  $modules_filtered = array_filter($module_definitions, '_drupal_origins_filter_module_extensions');
  return $modules_filtered;
}

/**
 * Generate a rendereable array with the modules dependencies given a module.
 *
 * @param object $module
 *   Module info object.
 *
 * @return array
 *   $render
 */
function _drupal_origins_get_renderable_module_dependencies($module) {
  $render = array(
    '#type' => 'container',
    'content' => array(
      $module->name . '_modules_header' => array(
        '#markup' => '<span>' . st('The following modules will be enabled. Please, pay attention in this step, enable this extension only if you need most of them.') . '</span>',
      ),
      $module->name . '_modules' => array(
        '#theme' => 'item_list',
        '#items' => $module->info['dependencies'],
      ),
    ),
    '#states' => array(
      'visible' => array(
        ':input[name="' . $module->name . '"]' => array('checked' => TRUE),
      ),
    ),
  );

  return $render;
}

/**
 * Filter the given module by if it's a Drupal Origins extension or not.
 *
 * @param object $module
 *   Module definition.
 *
 * @return bool
 *   $is_extension
 */
function _drupal_origins_filter_module_extensions($module) {
  $is_extension = _drupal_origins_is_valid_extension($module->name);
  return $is_extension;
}

/**
 * Check the given extension is a valid Drupal Origins extension.
 *
 * @param string $extension
 *   Extension name.
 *
 * @return bool
 *   $is_valid
 */
function _drupal_origins_is_valid_extension($extension) {
  $is_valid = (boolean) preg_match('/drupal_origins_/', $extension);
  return $is_valid;
}

/**
 * Auxiliary function which clear all caches.
 *
 * @see drupal_origins_install_extensions
 */
function _drupal_origins_clear_caches(&$context) {
  $context['message'] = st('@operation', array('@operation' => 'Clear caches'));
  drupal_flush_all_caches();
}

/**
 * Auxiliary function which enables a list of modules.
 *
 * @param string $module
 *   Module to enable.
 *
 * @see drupal_origins_install_extensions
 */
function _drupal_origins_enable_module($module, &$context) {
  module_enable(array($module));
  $context['message'] = st('Installed %module module.', array('%module' => $module));
}

/**
 * Helper function to configure EU Cookie compliance settings.
 */
function _drupal_origins_configure_eu_cookie_compliance() {
  // Get the proper localization function.
  $t = get_t();

  // Add permission 'display EU Cookie Compliance popup' to all roles
  $permissions = array('display EU Cookie Compliance popup' => 'display EU Cookie Compliance popup');
  user_role_grant_permissions(1, array_keys($permissions));
  user_role_grant_permissions(2, array_keys($permissions));
  user_role_grant_permissions(3, array_keys($permissions));

  // Customize the default popup settings
  $eu_popup_settings = eu_cookie_compliance_get_settings();
  if (!empty($eu_popup_settings)) {
    global $language;
    $user = new stdClass();
    $user->uid = 1;

    // Enable popup and set our default settings for EU cookies compliance
    $eu_popup_settings['popup_enabled'] = 1;
    $eu_popup_settings['popup_clicking_confirmation'] = 0;
    $eu_popup_settings['popup_position'] = 0;
    $eu_popup_settings['popup_agree_button_message'] = $t('OK, I agree');
    $eu_popup_settings['popup_disagree_button_message'] = $t('No, give me more info');
    $eu_popup_settings['popup_agreed_enabled'] = 0;
    $eu_popup_settings['popup_hide_agreed'] = 0;
    $eu_popup_settings['popup_find_more_button_message'] = $t('More info');
    $eu_popup_settings['popup_hide_button_message'] = $t('Hide');
    $eu_popup_settings['popup_link_new_window'] = 1;
    $eu_popup_settings['popup_height'] = '';
    $eu_popup_settings['popup_width'] = '100%';
    $eu_popup_settings['popup_delay'] = 1;
    $eu_popup_settings['popup_bg_hex'] = '0779BF';
    $eu_popup_settings['popup_text_hex'] = 'ffffff';
    $eu_popup_settings['domains_option'] = 1;
    $eu_popup_settings['domains_list'] = '';
    $eu_popup_settings['exclude_paths'] = '';
    $eu_popup_settings['popup_info']['format'] = filter_default_format($user);
    $eu_popup_settings['popup_agreed']['format'] = filter_default_format($user);

    // Create a basic page with a default private policies
    $cookies_page_values = array(
      'type' => 'page',
      'uid' => $user->uid,
      'status' => 1,
      'comment' => 0,
      'promote' => 0,
    );
    $private_policy = entity_create('node', $cookies_page_values);
    $private_policy_wrapper = entity_metadata_wrapper('node', $private_policy);
    $private_policy_wrapper->title->set('Private policies');
    $private_policy_wrapper->body->set(array('value' => 'A bunch of text about things that interest me'));
    $private_policy_wrapper->save();

    // Add the default page with private policies to EU cookie compliance setting
    if ($private_policy_page_id = $private_policy_wrapper->getIdentifier()) {
      $eu_popup_settings['popup_link'] = 'node/' . $private_policy_page_id;
    }
    // Set the new settings
    variable_set('eu_cookie_compliance_' . $language->language, $eu_popup_settings);
  }
}
